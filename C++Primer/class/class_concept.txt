<1>类的定义和声明
1.类的概念
-最简单地说，类就是定义了一个新的类型和一个新的作用域。
-类可以没有成员，也可以有多个成员。成员可以是数据，函数或类型别名(typedef)
-在类内部定义的函数默认为inline。也可以显式地在类内部声明inline函数，或者在类外部的定义部分声明为inline。inline函数必须在调用该函数的每个源文件中可见，因此inline成员函数定义通常放在类定义的同一头文件中。
-const成员函数声明为:int func()const;即这个成员函数声明为常量，意味着这个成员函数不能改变其所操作对象的数据成员。const必须同时出现在声明和定义中，否则会编译错误。

2.数据抽象和封装
-数据抽象和封装是类的基本思想
-数据抽象是一种依赖于接口和实现分离的编程（设计）技术。
-封装是一项将低层次的元素组合起来形成新的，高层次实体的技术。其关键在于隐藏实现的细节。
-访问标号实现的抽象和封装：public,private,protected。这些访问标号出现的次数是不限的。
-以struct定义类，则第一个访问标号之前的成员默认为public，以class定义类，则默认为private
-数据抽象和封装的好处：（1）避免类内部出现无意的，可能破坏对象状态的用户级错误。（2）随时间推移可以根据需求改变或缺陷报告来完善类实现，而无需改动用户级代码。

3.类声明与类定义
-类声明而未定义，称之为前向声明(forward declaration)，是一个不完全类型(incompete type)。
-不完全类型不能定义其对象，只能用于定义指向该类型的指针或引用，以及声明使用该类型作为形参或返回类型的函数。
-只有在定义类类型对象时，编译器才会分配内存空间。

4.this指针
-指向类对象的指针，与调用成员函数的对象绑定在一起。
-在成员函数内部通常不必显式引用this，但有时候需要返回对this指针的引用（比如链式表达式a.f1().f2()）。
-this指针实质上是一个const指针，它可以改变其所指向的值，但它本身保存的地址无法改变。
-从const成员函数返回this指针遇到的问题：假如const成员函数cf()，类对象a，则a.cf().f1()编译无法通过。原因是cf()返回的是一个const对象，但却调用了非const成员函数f1()。f1()可能需要修改对象的数据成员。解决方法是重载const成员函数
className& cf() { do_cf(); }
const className& cf()const { do_cf(); }
通过一个实现函数，让两个版本的cf()调用它，避免代码重复
returnType do_cf();
-可以将数据成员声明为mutable来实现可变数据成员。mutable成员永远都不可能是const，即使它是const对象的成员。const成员函数也可以修改它。

5.类作用域
-类成员声明的名字查找：先检查出现在名字使用之前的类成员声明；否则检查包含类定义的作用域中出现的声明以及出现在类定义之前的声明；
-类成员定义中的名字查找：先检查成员函数局部作用域中的声明；然后再查找类成员中的声明；最后查找在此成员函数定义之前的声明；

6.构造函数
-构造函数可以被重载，类对其数量没有限制。只有在未定义任何构造函数的时候，编译器才会自动生成一个默认构造函数。
-构造函数的初始化式比在函数体内进行赋值计算要好，特别是类中有其他类类型的数据成员时，可以避免该成员的构造函数成本。
-当类具有const数据成员的时候，必须使用初始化式。
-初始化式的初始顺序是按照成员的声明顺序进行的，而跟其本身的列出顺序无关。
-默认实参可以减少代码重复，比如
Sales_item (const std::string &book =""):isbn(book),units_sold(0),revenue(0.0) {}
这样，Sales_item s1("C++ Primer")和Sales_item s2都是合法的。这就是所谓的“缺省参数值”。
-隐式类型转换：对于上述Sales_item类，如果有
std::string null_book = "9-99";
Sales_item item("9-99");
item.same_item(null_book); //same_item(const Sales_item &)是一个成员函数，接收Sales_item类型的实参。
这样是合法的，string类型的null_book会调用Sales_item的默认构造函数，隐式地转换成Sales_item类。
抑制隐式转换的做法是，把构造函数声明为explicit。此时，只能进行显式转换item.same_item(Sales_item(null_book));
通常将构造函数声明为explicit是有好处的，这样可以避免错误，当需要转换类型的时候显式声明一下就可以了。
-类成员的显式初始化只有在没有定义构造函数，且所有数据成员都是public的情况下才能使用。比如
struct Data {
	int ival;
	char *ptr
};
Data val = { 0,0 };
需要注意的是，显式初始化顺序必须按照成员的声明顺序。

7.友元
-友元机制允许一个类将对其非公有成员的访问权授予指定的函数或类。
-友元声明成组地放在类定义的开始或结尾是个好主意。
-可以将函数，类，类的特定成员函数设为某个类的友元。
-友元关系之间的声明和定义是相互依赖的。比如
class Window_Mgr;
class Screen {
	friend Window_Mgr& Window_Mgr::relocate();
};
由于Screen要将Window_Mgr声明为友元，所以Window_Mgr必须在其定义前声明，同样，由于relocate()函数需要使用Screen对象的数据成员，因此必须在Screen定义完后它才定义。

8.static类成员
-static类成员是与类关联的，而与类对象无关。
-static类成员的优点：
成员只在类的作用域中有效，可以避免与其他类的成员或全局对象名字冲突。
可以实施封装，static成员可以是私有成员，而全局对象不可以。
-声明static只需要在成员前面加入关键字static，而其定义部分不需该关键字。
-使用static成员的方法有：用对象/引用/指针直接调用；通过作用域操作符::调用
-static成员函数没有this指针，因为它与类对象是无关联的。static成员函数不能声明为const，也不能声明为虚函数
-static数据成员必须在类定义体的外部定义：int myClass::staticVar = 1;
-const static数据成员则可以在类定义体内部定义，但必须在类的外部也定义，只不过不需再指定初始值。比如const int myClass::const_stacic_Var;(初始值在类定义内部)

9.C++类可以包含自己类型的静态数据成员，也可以包含自己类型的指针，但不能包含自己类型的对象。
class Test {
	static Test self; //ok,静态成员与类对象的大小无关
	Test *p_self; //ok，指针是固定大小的，32位4字节，64位8字节
	Test t; //error，类是未完成的，编译器无法知道类对象的大小
};

10.空类的大小问题
class Empty {}; // sizeof(Empty) == 1;这是为了保证每个对象的地址都不相同
class Derived1:public Empty {}; //sizeof(Derived1) == 1;
class Derived2:public Empty { int i; }; //sizeof(Derived2) == 4;(not 5!)
class Derived3:virtual public Empty {}; //sizeof(Derived3) == 8;(64位操作系统，该大小是一个虚指针的大小);
class Derived4:virtual public Empty { int i; } //sizeof((Derived4) == 16;
