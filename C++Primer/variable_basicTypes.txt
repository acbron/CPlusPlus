const限定符
const是避免magic number的手段，解决magic number不利于开发和维护的弊端。
注意：const默认为局部变量，只能在该对象所在文件里可见。解决方法是声明为extern
	//file1.cpp
	extern const int SIZE = 1024;
	//file2.cpp
	extern const int SIZE; //uses SIZE defined in file1

指针和const限定符
1.指向const对象的指针
	const int x = 3; const int *ptr = &x;
	这样的定义意味着，ptr指向的是一个const对象，所以无法通过ptr修改对象的值。同时，非指向const对象的指针用来指向const对象是会导致编译错误的！
	如果将指向const对象的指针去指向一个非const对象，仍然无法通过指针去修改对象的值，因为系统会把它所指的对象都视为const。
2.const指针
	int x = 3; int *const cptr = &x;
	意思是指针本身是const，它可以指向const对象，也可以指向非const对象，而且可以修改非const对象的值，但它本身无法被修改，即无法让它指向另外的对象。
	这跟引用有点相似，所以const指针必须初始化。
	
引用
引用是一种复合类型(compound type)：引用必须用与该引用同类型的对象初始化。
	//code 1
	double dval = 3.14;
	int &ri = dval;
	这时实际编译器干的是
	int temp = dval;
	int &ri = temp;
	所以修改ri的值无法影响dval
引用是对象的别名：当引用初始化后，只要该引用存在，它就保持绑定到初始化时指向的对象。不可能将引用绑定到另一个对象。
const引用：指向const对象的引用，还可以指向字面常量和不同类型的对象，详细见上述code 1。

sizeof操作符
<1>常见类型的字节大小（单位：字节Byte）
	int,unsigned int:4
	short int,unsigned short int:2
	long long,unsigned long long:8
	float:4
	double:8
	char:1
	bool:1
	指针：32位系统下为4，64位系统下为8
举个例子：
int x;
int *p = &x;
sizeof(p) = 8,sizeof(*p) = 4; //即sizeof取的是指针所占内存的大小，如果解引用则取的是对象所占内存的大小（64位系统）
char *ss = "0123" // sizeof(ss) = 8,指针的大小
char ss[] = "0123" // sizeof(ss) = 5,字符串的大小，注意C风格字符串末尾的\0
int a[100]; //sizeof(a) = 4*100 = 400

<2>结构体的字节大小
CPU的优化规则：对于n字节的元素(n=2,4,8...),它的首地址能被n整除，才能获得最佳性能。
结构体的默认对齐参数是8
如：
struct B {
	bool b;
	int i;
	bool b2;
};
sizeof(B) = 12
struct C {
	int i;
	bool b;
	bool b2;
};
sizeof(C) = 8;
即以结构体内字节长度最长的元素为对齐参数，然后一行一行考虑。
对于结构B，假设地址从0开始，bool b只有1字节，占了一行，但为了跟int对齐，实质上有三个字节是空的。
所以int i在第二行，对齐到了字节4。同理bool b2也占了一行。
具体图示为
b - - -
   i
b - - -
而结构C为
   i
b b - -

再考虑空类情况
class A{}; // sizeof(A) = 1
class B{};
class C:public A{}; // sizeof(C) = 1
class D:public A,public B{}; //sizeof(D) = 1;
class E:public virtual A{}; //sizeof(E) = 4,因为虚继承包含了虚指针
