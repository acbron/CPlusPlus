				条款32：确定你的public集成塑模出is-a关系
			Make sure public inheritance models "is-a"
	如果你令class D(Derived)以public形式继承class B(Base)，你便是告诉C++编译器(以及你的代码读者)说，每一个类型为D的对象同时也是一个类型为B的对象，反之不成立。即class B为一般化的，而D是特殊化的。
	is-a意味着base class身上的每一件事一定也适用于derived class身上。



				条款33：避免遮掩继承而来的名称
			Avoid hiding inherited names
	变量的作用域(scopes)中，如果有
int x;
void someFunc()
{
	double x;
	std::cin >> x;
}
global变量int x会被local变量double x遮掩。这是C++的名称遮掩规则(name-hidig rules)干的。其查找规则是一层一层往上找，找到即止。同理，考虑继承体系中，有
class Base{
	public:
		virtual void f1() = 0;
		virtual void f1(int x);
		...
};
class Derived:public Base{
	virtual void f1();
	...
};
则如果有一个Derived d对象，d.f1()调用的是Derived那个版本，而d.f1(3)却会编译不通过，这是因为Base上的所有重载的f1都被Derived遮掩了！考虑到is-a关系，这决不允许在public继承里发生！解决方法是：
(1)在Derived class的public里使用声明式
class Derived:public Base{
	using Base::f1;
	virtual void f1();
	...
};
(2)使用转交函数(forwarding functions)
class Derived:public Base{
	virtual void f1();
	virtual void f1(int x)
	{
		Base::f1(x);
	}
	...
};



				条款34：区分接口继承和实现继承
			Differentiate between inheritance of interface and inheritance of implementation.
	public继承由两部分组成：函数接口(function interfaces)继承和函数实现(function implementations)继承。
	有三种你可能会希望的继承方式：
(1)只继承成员函数的接口
(2)同时继承函数的接口和实现，但又希望能够覆写(override)它们所继承的实现
(3)同时继承函数的接口和实现，但不允许覆写。
考虑如下代码：
class Shape {
	public:
		virtual void draw() const = 0;
		virtual void error(const std::string &msg);
		int objectID() const;
		...
};
class Rectangle:public Shape { ... };
class Ellipse:public Shape { ... };
	首先，由于draw()这个pure virtual函数的存在，所以Shape是一个抽象类，无法创建该类的实体。
	(1)声明pure virtual函数的目的是为了让derived class只继承函数接口，这是告诉设计该类的derived类的人，必须提供一个draw()函数
	(2)声明impure virtual函数的目的是让derived class继承该函数的接口和缺省实现。比如error()，derived class可以自己实现该函数，也可以使用Shape提供的缺省版本
	但允许impure virtual函数同时指定函数声明和函数缺省行为可能会导致危险。比如virtual函数的缺省行为不是新增derived class所需要的行为，而新增derived class又未重新定义该函数。这时有两种做法：
	1.将virtual函数声明为pure，只提供接口，然后在protected里实现缺省行为。这样就切断了virtual函数接口和缺省实现之间的连接。这样，需要缺省行为的derived class里，只需要对protected里的缺省行为进行inline调用，像这样
	virtual void fly(const Airport &destination){ 
		defaultFly(destination); //详细代码查阅《Effective C++,3rd》P161
	}
这样便强制新derived class设计者对pure virtual函数进行重新实现了。
	2.在base class里对pure virtual函数提供一份实现，这样在需要缺省行为的derived class里只需明确申请，就可以使用缺省行为了，像这样
	virtual void fly(const Airport &destination){
		Airplane::fly(destination) //Airplane是base class
	}
但是，这样一来，原本为protected的函数便成了public。两种方法视情况而定。
	(3)声明non-virtual函数的目的是为了令derived class继承函数的接口以及一份强制性的实现。



				条款35：考虑virtual函数以外的其他选择
			Consider alternatives to virtual functions.
	略。暂时没看懂。



				条款36：绝不重新定义继承而来的non-virtual函数
			Never redefine an inherited non-virtual function.
	考虑如下代码：
class B {
	public:
		void mf();
		...
};
class D:public B {
	public:
		void mf();
		...
};
D x;
B *pB = &x;
D *pD = &x;
pB->mf(); //调用B::mf
pD->mf(); //调用D::mf
既，虽然pB,pD指向的是同一个D对象，但却有着不同的行为。原因是，non-virtual函数都是静态绑定的(statically bound)，而virtual函数则是动态绑定的(dynamically bound)。所以，如果重新定义derived class继承而来的non-virtual函数，那么derived class对象就会发生类似精神分裂的行为。同时，这样的设计也不符合public继承是is-a关系，这是矛盾的设计。



				条款37：绝不重新定义继承而来的缺省参数值
			Never redefine a function's inherited default parameter value.
	首先，根据条款36，重新定义一个继承而来的non-virtual函数永远是错的，所以只考虑继承一个带有缺省参数值的virtual函数。
	静态绑定又名前期绑定(early binding)，动态绑定则称为后期绑定(late binding)。考虑上述继承，virtual函数属于动态继承，而缺省参数值属于静态继承。这里貌似就出现了分歧了。考虑以下代码：
class Shape {
	public:
		enum ShapeColor {
			Red,Green,Blue
		};
		virtual void draw(ShapeColor color = Red) const = 0;
		...
};
class Rectangle:public Shape {
	public:
		virtual void draw(ShapeColor color = Green) const;
		...
};
class Circle:public Shape {
	public:
		virtual void draw(ShapeColor color) const;
		...
};
Shape *ps;
Shape *pc = new Circle;
Shape *pr = new Rectangle;
ps,pc,pr都是以Shape*为静态类型的，但pc的动态类型是Circle*，pr的动态类型是Rectangle*。动态类型可以通过赋值进行改变，比如ps = pc。virtual函数的动态绑定，意思就是调用该virtual函数的版本取决与动态类型。
再看上述继承体系，如果有pr->draw()，调用的竟然是Rectangle::draw(Shape::Red)！因为缺省参数值是静态绑定，所以该缺省参数值是来自与base class！也就是这个调用中，class Rectangle和class Shape各出一半力！这是奇怪的行为。
而对于class Circle对draw()的定义，也是不妥的。因为这意味着Circle对象对draw()的调用必须提供参数，除非以指针或reference调用此函数时，才可以采用Shape的缺省参数值。
那如果Rectangle的定义里，把缺省参数值改成与Shape一致的Red呢？也不好，代码重复，而且带有相依性。如果以后一旦修改了Shape class里draw()的缺省参数值，那就是惊一发动全身的事了。
解决方法就是考虑virtual函数的替代设计了，见条款35



				 条款38：通过复合塑模出has-a或“根据某物实现出”
			Model "has-a" or "is-implemented-in-terms-of" through composition.
	复合(composition)是类型之间的一种关系，即某种类型的对象内含它种类型的对象。例如：
class Address{ ... };
class Person {
	public:
		Address address; //合成成分物(composed object)
		std::string name;
};
复合有许多同义词，比如layering(分层),containment(内含),aggregation(聚合)和embedding(内嵌)。
与public继承的is-a关系不同，复合意味着has-a或is-implemented-in-terms-of。
当复合发生于应用域内的对象之间时是has-a关系
当复合发生于实现域内的对象之间则是is-implemented-in-terms-of关系
[注]：应用域指人，汽车等；实现域指缓冲区，互斥器，查找树等。上述Person和Address属于has-a关系


